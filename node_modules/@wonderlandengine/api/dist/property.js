/**
 * Component property type.
 */
export var Type;
(function (Type) {
    /**
     * **Native**
     *
     * Property of a native component. Must not be used in custom components.
     *
     * @hidden
     */
    Type[Type["Native"] = 0] = "Native";
    /**
     * **Bool**:
     *
     * Appears in the editor as a checkbox.
     *
     * Initial value is `false`, unless overridden by the `default` property.
     */
    Type[Type["Bool"] = 1] = "Bool";
    /**
     * **Int**:
     *
     * Appears in the editor as an integer input field.
     *
     * Initial value is `0`, unless overridden by the `default` property.
     */
    Type[Type["Int"] = 2] = "Int";
    /**
     * **Float**:
     *
     * Appears in the editor as a floating point input field.
     *
     * Initial value is `0.0`, unless overridden by the `default` property.
     */
    Type[Type["Float"] = 3] = "Float";
    /**
     * **String / Text**:
     *
     * Appears in the editor as a single-line text input field.
     *
     * Initial value is an empty string, unless overridden by the `default`
     * property.
     */
    Type[Type["String"] = 4] = "String";
    /**
     * **Enumeration**:
     *
     * Appears in the editor as a dropdown with given values. The additional
     * `values` parameter with selection options is mandatory.
     *
     * The property value is resolved to an **index** into the `values` array.
     *
     * Initial value is the first element in `values`, unless overridden by
     * the `default` property. The `default` value can be a string or an index
     * into `values`.
     *
     * @example
     *
     * ```js
     *     camera: {type: Type.Enum, values: ['auto', 'back', 'front'], default: 'auto'},
     * ```
     */
    Type[Type["Enum"] = 5] = "Enum";
    /**
     * **Object reference**:
     *
     * Appears in the editor as an object resource selection dropdown
     * with object picker.
     *
     * Initial value is `null`.
     */
    Type[Type["Object"] = 6] = "Object";
    /**
     * **Mesh reference**:
     *
     * Appears in the editor as a mesh resource selection dropdown.
     *
     * Initial value is `null`.
     */
    Type[Type["Mesh"] = 7] = "Mesh";
    /**
     * **Texture reference**:
     *
     * Appears in the editor as a texture resource selection dropdown.
     *
     * Initial value is `null`.
     */
    Type[Type["Texture"] = 8] = "Texture";
    /**
     * **Material reference**:
     *
     * Appears in the editor as a material resource selection dropdown.
     *
     * Initial value is `null`.
     */
    Type[Type["Material"] = 9] = "Material";
    /**
     * **Animation reference**:
     *
     * Appears in the editor as an animation resource selection dropdown.
     *
     * Initial value is `null`.
     */
    Type[Type["Animation"] = 10] = "Animation";
    /**
     * **Skin reference**:
     *
     * Appears in the editor as a skin resource selection dropdown.
     *
     * Initial value is `null`.
     */
    Type[Type["Skin"] = 11] = "Skin";
    /**
     * **Color**:
     *
     * Appears in the editor as a color widget.
     *
     * Initial value is `[0.0, 0.0, 0.0, 1.0]`, unless overridden by the
     * `default` property.
     */
    Type[Type["Color"] = 12] = "Color";
    /**
     * **Vector of two floats**:
     *
     * Appears in the editor as a two-element floating point input field.
     *
     * Initial value is `[0.0, 0.0]`, unless overridden by the
     * `default` property.
     */
    Type[Type["Vector2"] = 13] = "Vector2";
    /**
     * **Vector of three floats**:
     *
     * Appears in the editor as a three-element floating point input field.
     *
     * Initial value is `[0.0, 0.0, 0.0]`, unless overridden by the
     * `default` property.
     */
    Type[Type["Vector3"] = 14] = "Vector3";
    /**
     * **Vector of four floats**:
     *
     * Appears in the editor as a four-element floating point input field.
     *
     * Initial value is `[0.0, 0.0, 0.0, 0.0]`, unless overridden by the
     * `default` property.
     */
    Type[Type["Vector4"] = 15] = "Vector4";
})(Type || (Type = {}));
/**
 * Default cloner implementation.
 *
 * Clones array-like properties and leaves all other types unchanged.
 */
export class DefaultPropertyCloner {
    clone(type, value) {
        switch (type) {
            case Type.Color:
            case Type.Vector2:
            case Type.Vector3:
            case Type.Vector4:
                return value.slice();
            default:
                return value;
        }
    }
}
/** Default cloner for property values. */
export const defaultPropertyCloner = new DefaultPropertyCloner();
/**
 * Component property namespace.
 *
 * Usage:
 *
 * ```js
 * import {Component, Property} from '@wonderlandengine/api';
 *
 * class MyComponent extends Component {
 *     static Properties = {
 *         myBool: Property.bool(true),
 *         myInt: Property.int(42),
 *         myString: Property.string('Hello World!'),
 *         myMesh: Property.mesh(),
 *     }
 * }
 * ```
 *
 * For TypeScript users, you can use the decorators instead.
 */
export const Property = {
    /**
     * Create an boolean property.
     *
     * @param defaultValue The default value. If not provided, defaults to `false`.
     */
    bool(defaultValue = false) {
        return { type: Type.Bool, default: defaultValue };
    },
    /**
     * Create an integer property.
     *
     * @param defaultValue The default value. If not provided, defaults to `0`.
     */
    int(defaultValue = 0) {
        return { type: Type.Int, default: defaultValue };
    },
    /**
     * Create an float property.
     *
     * @param defaultValue The default value. If not provided, defaults to `0.0`.
     */
    float(defaultValue = 0.0) {
        return { type: Type.Float, default: defaultValue };
    },
    /**
     * Create an string property.
     *
     * @param defaultValue The default value. If not provided, defaults to `''`.
     */
    string(defaultValue = '') {
        return { type: Type.String, default: defaultValue };
    },
    /**
     * Create an enumeration property.
     *
     * @param values The list of values.
     * @param defaultValue The default value. Can be a string or an index into
     *     `values`. If not provided, defaults to the first element.
     */
    enum(values, defaultValue) {
        return { type: Type.Enum, values, default: defaultValue };
    },
    /** Create an {@link Object3D} reference property. */
    object(opts) {
        return { type: Type.Object, default: null, required: opts?.required ?? false };
    },
    /** Create a {@link Mesh} reference property. */
    mesh(opts) {
        return { type: Type.Mesh, default: null, required: opts?.required ?? false };
    },
    /** Create a {@link Texture} reference property. */
    texture(opts) {
        return { type: Type.Texture, default: null, required: opts?.required ?? false };
    },
    /** Create a {@link Material} reference property. */
    material(opts) {
        return { type: Type.Material, default: null, required: opts?.required ?? false };
    },
    /** Create an {@link Animation} reference property. */
    animation(opts) {
        return { type: Type.Animation, default: null, required: opts?.required ?? false };
    },
    /** Create a {@link Skin} reference property. */
    skin(opts) {
        return { type: Type.Skin, default: null, required: opts?.required ?? false };
    },
    /**
     * Create a color property.
     *
     * @param r The red component, in the range [0; 1].
     * @param g The green component, in the range [0; 1].
     * @param b The blue component, in the range [0; 1].
     * @param a The alpha component, in the range [0; 1].
     */
    color(r = 0.0, g = 0.0, b = 0.0, a = 1.0) {
        return { type: Type.Color, default: [r, g, b, a] };
    },
    /**
     * Create a two-element vector property.
     *
     * @param x The x component.
     * @param y The y component.
     */
    vector2(x = 0.0, y = 0.0) {
        return { type: Type.Vector2, default: [x, y] };
    },
    /**
     * Create a three-element vector property.
     *
     * @param x The x component.
     * @param y The y component.
     * @param z The z component.
     */
    vector3(x = 0.0, y = 0.0, z = 0.0) {
        return { type: Type.Vector3, default: [x, y, z] };
    },
    /**
     * Create a four-element vector property.
     *
     * @param x The x component.
     * @param y The y component.
     * @param z The z component.
     * @param w The w component.
     */
    vector4(x = 0.0, y = 0.0, z = 0.0, w = 0.0) {
        return { type: Type.Vector4, default: [x, y, z, w] };
    },
};
